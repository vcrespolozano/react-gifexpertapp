{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","className","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","gif","GifExpertApp","categorias","item","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMlB,SACI,uBACIO,UAAY,QACZC,KAAY,OACZC,MAAaV,EACbW,SArBc,SAACR,GACvBF,EAAeE,EAAES,OAAOF,a,uBCRnBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGKI,MAAMF,GAHX,cAGbG,EAHa,gBAIEA,EAAUC,OAJZ,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAOD,EAAIC,GACXC,MAAOF,EAAIE,MACXV,IAAG,UAAIQ,EAAIG,cAAR,aAAI,EAAYC,iBAAiBZ,QAVzB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMF,EAAS,EAATA,IAC/B,OACI,sBAAKhB,UAAU,gDAAf,UACI,qBAAKsB,IAAKN,EAAKO,IAAKL,IACpB,gCAAQA,QCFPM,EAAU,SAAC,GAAiB,IAAhBlB,EAAe,EAAfA,UAErB,ECHwB,SAACA,GAEzB,MAA0Bf,mBAAS,CAC/BsB,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAW,WACPvB,EAAQC,GACHuB,MAAM,SAACV,GACJQ,EAAS,CACLd,KAASM,EACTM,SAAS,SAGtB,CAACnB,IAEGoB,EDd0BI,CAAaxB,GAAjCa,EAAb,EAAQN,KAAaY,EAArB,EAAqBA,QAErB,OACI,qCACI,6BAAKnB,IACHmB,EAAU,wCAAe,KAEvBN,EAAOJ,KAAK,SAACgB,GACT,OAAO,cAAC,EAAD,CAA0Bb,MAAOa,EAAIb,MAAOF,IAAKe,EAAIvB,KAAnCuB,EAAId,WESlCe,EAnBM,WAEjB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGI2C,EAAWlB,KAAI,SAACmB,GACZ,OAAO,cAAC,EAAD,CAAoB5B,UAAW4B,GAAjBA,U,MCXzCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2d147b1e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( {setCategorias} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2 )\r\n        {\r\n            setCategorias( cats => [inputValue, ...cats] );\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                className = \"campo\"\r\n                type      = \"text\"\r\n                value     = {inputValue}\r\n                onChange  = { handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategorias: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async(categoria) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=zyFXU5x3nAQ466a1CN5LzEMBs340ezZ9`;\r\n    const respuesta = await fetch(url);\r\n    const {data} = await respuesta.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id   : img.id,\r\n            title: img.title,\r\n            url  : img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,img}) => {\r\n    return (\r\n        <div className=\"grid_item animate__animated animate__bounceIn\">\r\n            <img src={img} alt={title} />\r\n            <label>{title}</label>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({categoria}) => {\r\n\r\n    const { data:images, loading } = useFetchGifs(categoria);\r\n\r\n    return (\r\n        <>\r\n            <h3>{categoria}</h3>\r\n            { loading ? <p>Loading</p>:null }\r\n            {\r\n                images.map( (gif) => {\r\n                    return <GifGridItem key={gif.id} title={gif.title} img={gif.url} />;\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (categoria) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs(categoria)\r\n            .then( (images) => { \r\n                setState({\r\n                    data   : images,\r\n                    loading: false\r\n                }) \r\n            });\r\n    }, [categoria]);\r\n\r\n    return state;\r\n}","import { useState } from \"react\";\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categorias, setCategorias] = useState(['One Punch']);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategorias={setCategorias} />\r\n            <hr />\r\n\r\n            {\r\n                categorias.map((item) => {\r\n                    return <GifGrid key={item} categoria={item} />;\r\n                })\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// GifExpertApp\n"],"sourceRoot":""}